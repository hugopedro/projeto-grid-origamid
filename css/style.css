@import url('https://fonts.googleapis.com/css?family=Vollkorn:400,400i,700&display=swap');

body, p, h1, ul, li, blockquote {
  padding: 0px;
  margin: 0px;
}

body {
  font-family: 'Vollkorn', serif;
}

li {
  list-style: none;
}

a {
  text-decoration: none;
}

img {
  max-width: 100%; /* Controla o tamanho das imagens, diminui de acordo c conteudo */
  display: block; /* Sem isso as imagens vão ter pixels em branco a mais */
  border-radius: 5px; /* Arredonda */
}


/* GRID GERAL */

.estrutura {
  display: grid;
  grid-template-columns: minmax(160px, 1fr) 3fr 300px; 

  /* uma pra sidenav(min 160px) - pra quando ficar pequeno nao diminuir mais ainda,
   outra conteudo, outra anuncio (que nesse caso é desejavel imagem de 300px)
  3fr pois é desejavel que o conteudo expanda 3 vezes mais que a sidenav */

  grid-template-areas: "header header header"
                      "sidenav content anuncios"
                      "footer footer footer"

  /* Agora é necessário posicionar os elementos */
}

@media (max-width: 1200px) {
  .estrutura {
    grid-template-areas: 
    "header header header"
    "sidenav content content"
    "sidenav anuncios anuncios"
    "footer footer footer";
  }
}

@media (max-width: 760px) {
  .estrutura {
    grid-template-columns: 100%; 
    grid-template-areas: 
    "header"
    "sidenav"
    "content"
    "anuncios"
    "footer";
  }
}


/*HEADER */

.header {
  grid-area: header; /* Faz o header pegar de ponta-a-ponta */
 /* É interessante usar a mesma classe do nome do areas para facilitar */
  background: linear-gradient(135deg, #8844ee, #B07DFB);
  padding: 30px;
  display: grid;
  grid-template-columns: 1fr auto; /* 1fr do logo e o menu auto, a marca cresceu de ponta-a-ponta */
  align-items: center; /* alinha o logo no centro do header  (align é vertical )*/
  /* Para alinhar o logo no canto esquerdo e o menu no canto direito usou-se o grid
  então na linha do header que pega de ponta-a-ponta criou-se um outro grid que não
  tem nada a ver com o do lado de fora */
  
}

.logo {
  max-width: 200px; /* sem isso o logo ficaria do tamanho bruto - gigante */
  /* Eaí o grid ia expandir, ficando inviável */
}

.header nav ul{
  /* o menu tem que ser display flex, tem que ficar um do lado do outro */
  display: flex;
  flex-wrap: wrap;
}

.header nav a {
  display: block;
  padding: 10px; /* Cria uma área de contato maior no menu, bom pro mobile */
  color: white;
  font-size: 1.125em;
  background: rgba(0,0,0, .1); /* Cria fundinho opaco nos botões do menu*/
  border-radius: 5px;
  transition: 0.1s; /* Não deixa a passada do mouse do botão com cara de anos 90 */
  /* o transition deve ser colocado aqui (no item) e não no hover, se nao só fará
  a animação uma vez */
}

.header nav a:hover {
  background: rgba(0,0,0, .5); /* Deixa o botão em destaque ao passar o mouse*/ 
}

.header li + li {
  margin-left: 30px
  /*
    Faz com que cria um espaço entre os botões do menu (li no html), e só os que 
    tem um li antes do li, ou seja cria um espaço entre o segundo e o terceiro botão
    o primeiro não porque se não ia invadir o espaço de outra coisa, então isso é um
    hack útil, o + signfifica todo li que aparecer depois de um li 
    (lê de trás pra frente), o primeiro li não adicionou a margin porque nao tem
    nenhum antes, e o .header pois essa regra se aplica apenas aos li que estão
    dentro da classe header
  */;
}

@media(max-width: 760px) { /* Se estiver abaixo de 760px ... */
  .header {
    grid-template-columns: auto; /* O grid detecta que tem pouco tamanho e deixa em uma só coluna tudo*/
  }
  .logo {
    margin-bottom: 20px; /* a alteração acima deixou logo e botoes colados, isso separa*/
  }
  .header nav a { /* Diminuiu a tipografia para prever estourar o espaço de botão */
    font-size: 1em;
  }
  .header li + li { /* Diminui o espaçamento entre botoes do header */
    margin-left: 10px;
  }
}

/* SIDENAV */

.sidenav {
  grid-area: sidenav;
  background: #fafbfc; /* A primeira coisa é marcar territorio do sidenav, bem clarinho*/
  padding: 30px /* Valor padrão de padding */;

}

.sidenav li a { /* sidenav eh onde está os ícones */
  display: block;
  min-width: 60px; /* Menos que isso destrói o svg */
  max-width: 100px; /* 100px é bom, ter botão gigante não adianta */
  margin: 0 auto 30px auto; /* Topo 0 lado auto pra baixo 30px outro lado auto */
  /* auto permite que o ícone fique sempre no centro, nao importa o tamanho do sidenav */
  background: white;
  padding: 20px;
  border-radius: 5px; /* bordinhas um pouquinho arredondadas */
  box-shadow: 5px 5px 15px 0px rgba(44, 44, 44, 0.15);
  transition: .1s ease-out /* Saída suave ao mover o ponteiro do mouse */;

}

.sidenav li a:hover {
  background: #B07DFB;
}

@keyframes seta {
  from {
    right: 30px;
  }
  to {
    right: 20px;
  }
}

@media(max-width: 760px) {
  /* Se refere ao sidenav, ao diminuir a tela os botões da sidenav ficam um embaixo
  do outro, é porque por padrão <li> é display: block, para alterar isso coloca-se
  display: flex, isso garante que os ícones fiquem de lado
  */

  .sidenav {
    position: relative;
    overflow-x: auto; /* faz com que quando o menu estoure o eixo x o scroll
    nao fique no fim da pagina e sim no fim da area referente ao que foi estourado */
  }

  .sidenav::after {
    content: '→';
    position: absolute;
    top: 5px;
    right: 30px;
    color: rgba(0,0,0.3);
    animation: seta .5s ease-in 0s infinite alternate;
  }

  .sidenav ul {
    display: flex;
  }

  .sidenav li {
    flex: 1 0 60px; /* flex-grow: 1, flex-shrink: 0 e flex-basis: 60px */
    /* flex-grow: 1 -> O crescimento é distribuído igualmente antes e depois do
    conteúdo de cada elemento
    flex-shrink: 0 -> Não permite a diminuição dos itens
    flex-basis: 60px -> Indica o tamanho inicial do flex item antes da distribuição do espaço restante.
    Impede que diminua mais que 60px
    */
  }

  .sidenav {
    padding: 0 30px;
  }

  .sidenav li a {
    margin: 30px 30px 30px 0;;
  }
}

/* CONTENT */

.content {
  grid-area: content;
  max-width: 900px;
  margin: 0 auto; /* Porque se crescer num telão começa a gerar um espaço em branco
  e aí não fica no centro, isso garante que fique. */
  padding: 30px; /* Geralmente nos projetos o padding padrão é 30px */
  display: grid;
  grid-template-columns: 1fr 1fr; /* gera duas colunas */
  grid-gap: 30px;
}

.col-wide {
  grid-column: 1 / -1;
}

.imagem-1 {
  grid-row: span 2;
  align-self: end;
  /* Para pegar duas linhas, conta do inicio, ou seja expandiu duas linhas */
}

.imagem-2 {
  align-self: end;
  /* A imagem estava subindo um pouco conforme o texto de cima ficava curto,
  isso garante que ela ficará alinhada ao final */
}

/* ESTILOS CONTENT */

p {
  font-size: 1.2em;
  line-height: 1.6;
  letter-spacing: -0.005em; /* reduz espaçamento das letras, é só um mimo tipográfico */
  color: rgba(0, 0, 0, .7); /* Facilita a leitura porque a letra não fica tão preta */
}

.informacoes p + p { /* Quero falar com o p que vem após o outro p */
  margin-top: 30px; /* Se fosse só o p o p de cima ia ficar com mais margem onde nao deveria*/
}

/* TITULO */

.titulo {
  color: #B07DFB;
}

.titulo h1 {
  font-size: 3.75em;
  line-height: 1; /* Deixa a linha do titulo um pouco mais grudada, é estético */
  font-weight: 700; /* 700 é o valor que tá puxando da tipografia la no import do html */
}

.titulo span {
  font-size: 0.875em; /* 14 pixels */
  font-style: italic;
}

/* CARACTERÍSTICAS */

.caracteristicas {
  display: flex;
  align-items: flex-start; /* */
}

.caracteristicas > div {
  width: 80px;
  text-align: center;
  background: linear-gradient(135deg, #8844ee, #B07DFB);
  border-radius: 5px;
  box-shadow: 5px 5px 15px 0px rgba(44, 44, 44, 0.15);
  position: relative;
}

.caracteristicas > div:first-child {
  margin-right: 30px; /* Separa os itens */
}

.caracteristicas span {
  display: block;
  color: #B07DFB;
}

.numero {
  font-size: 3em;
  line-height: 1;
  margin: 10px auto;
}

.rotulo {
  background: white;
  border-radius: 0 0 5px 5px; /* 0 da borda esq e dir de cima e 5px das bordas embaixo */
  padding: 5px 0;
  position: relative; 
  top: 2px;
}

.destaque {
  font-size: 0.875em;
  color: #B07DFB;
  max-width: 16em;
}

.citacao p {
  font-size: 1.5em;
  font-style: italic;
  text-align: center; /* sem isso ao esticar a tela o painel ia aumentar e o 
  texto nao ia ficar no centro */
  max-width: 500px;
  margin: 0 auto; /* alinha o texto ao centro com o auto */
  color: white
}

.atributos li {
  color: white;
  font-family: Courier, monospace;
  font-size: 1.125em;
  padding: 15px;
  
}

.atributos li + li {
 border-top: 2px solid #B07DFB;
 /* isso permite desenhar as pequenas divisórias, sem colocar na primeira que
 é o topo, afinal li + li mexe num li que tenha uma antes !*/

}


.citacao, .atributos {
  align-self: start; /* Resolve o problema do painel de atributos expandir embaixo a 
  ponto de ficar espaço vazio quando mexe na resolução da tela, ou seja não é mais
  o padrão stretch! */
  padding: 30px;
  border-radius: 5px;
  box-shadow: 5px 5px 15px 0px rgba(44,44,44, 0.15);
  background: linear-gradient(135deg, #8844EE, #B07DFB);
}

/* ANUNCIOS */

.anuncios {
  grid-area: anuncios;
  background: #fafbfc;
  display: grid;
  align-content: start;
  padding: 30px;
  grid-gap: 30px; /* equivale ao grid-row-gap e grid-column-gap, Serve para dar um
  espaçamento entre os itens do grid, que no caso são os dois anuncios, vai funcionar
  mesmo quando diminuir a tela. O grid gap não adiciona os px para os lados do grid
  e sim entre os elementos */
}

/* FOOTER */

.footer {
  grid-area: footer;
  background: linear-gradient(135deg, #8844ee, #B07DFB);
}

.footer p{
  color: white;
  text-align: center;
  padding: 30px;
}

